name: Build and Deploy Code

on: [push, pull_request]

jobs:
  job1:
    environment:
      name: testing
    
    env:
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}

    services:
      - name: Test Database Connection
          run: |
            psql -h localhost -U ${{ secrets.DATABASE_USERNAME }} -d ${{ secrets.DATABASE_NAME }} -p 5432 -c 'SELECT 1;'
          env:
            PGPASSWORD: ${{ secrets.DATABASE_PASSWORD }}

      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
        ports:
          - 5433:5433
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    steps:
      - name: Pulling git repo
        uses: actions/checkout@v4 # to checkout the repo
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Update pip
        run: python -m pip install --upgrade pip
      - name: Install all dependencies
        run: pip install -r requirements.txt
      - name: Run tests with pytest
        run: |
          pip install pytest
          pip install httpx
          pytest
        continue-on-error: true  # Allow the workflow to continue even if this step fails
      - name: Handle Test Failures
        if: failure()
        run: |
          # Add commands to handle test failures, such as sending notifications or capturing logs
          echo "Tests failed, take appropriate action"
